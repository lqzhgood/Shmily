import{_ as a}from"./chunks/down_repo.qaP5-_4m.js";import{_ as o}from"./chunks/what-languages.pQIRa0c_.js";import{_ as t}from"./chunks/open_cmd.Dc_Ap6bK.js";import{_ as s,c as d,a0 as n,o as c}from"./chunks/framework.BQKxUb7q.js";const p="/Shmily/assets/cmd_run.Chgnt9hc.png",f=JSON.parse('{"title":"开始吧","description":"","frontmatter":{},"headers":[],"relativePath":"guide/use/begin.md","filePath":"guide/use/begin.md","lastUpdated":1726885745000}'),l={name:"guide/use/begin.md"};function i(r,e,h,u,m,b){return c(),d("div",null,e[0]||(e[0]=[n('<h1 id="开始吧" tabindex="-1">开始吧 <a class="header-anchor" href="#开始吧" aria-label="Permalink to &quot;开始吧&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>对于用户来说, 希望一个软件足够简单,打开一个窗口,点击一个按钮, 就可以得到最终的 <code>结果</code> . 这称为黑盒, 所有的事情都被这个按钮挡住的了,不利于 debug 与 程序的解耦.</p><p>若有些人只希望导出 MobileQQ 的数据做一个自己的 Ai 机器人 ,并不需要<code>Show(展示数据)</code>. 如果按照以上的设计,他还需要从上述按钮获取的展示 <code>结果</code> 逆向为数据.</p><p>所以 Shmily 的使用是在 <code>程序解耦</code> 与 <code>使用便利</code> 之间取舍. 我希望 Shmily 对于不懂编程的人能简单使用, 同时也能足够解耦拆分足够细, 不让开发者 <a href="https://baike.baidu.com/item/%E9%87%8D%E9%80%A0%E8%BD%AE%E5%AD%90/16837040" target="_blank" rel="noreferrer">重造轮子</a>, 中间的纽带就是文档了.</p><p>因为我自身是 Shimly 的开发者,很容易一叶障目, 所以我也很希望你们从各种角度对文档提出各方面的问题来完善文档. 欢迎 <a href="https://github.com/lqzhgood/Shmily/issues/new" target="_blank" rel="noreferrer">提出建议</a></p><p>基于以上 Shmily 的使用会被拆分为很多个步骤, 而且没有 GUI 界面, 这会让人看起来感觉很复杂, 但我保证, <b>每个步骤基本都是拷贝文件, 执行一行命令 完了~</b> 别担心~</p><h2 id="学前班-如何开始一个项目" tabindex="-1">学前班 ( 如何开始一个项目 ) <a class="header-anchor" href="#学前班-如何开始一个项目" aria-label="Permalink to &quot;学前班 ( 如何开始一个项目 )&quot;">​</a></h2><p>大部分项目并不会打包为有界面的 <code>&quot;exe&quot;</code>, 而是需要从源码运行, <code>Github</code> 是一个存储源码的网站, 本章介绍如何开始一个存储在 <code>Github</code> 项目</p><div class="info custom-block"><p class="custom-block-title">实操</p><p>以 <code>Windows11</code>、<code>https://github.com/lqzhgood/Shmily-Get-QQ-PC_MHT</code>(电脑QQ聊天记录) 为例</p><p>在每个章节最后均有实操示例</p></div><p>如果你非程序员, 可以展开这里获取一些基本知识来开始一个项目</p><details><summary>学前班教程</summary><h3 id="_1-下载源码" tabindex="-1">1. 下载源码 <a class="header-anchor" href="#_1-下载源码" aria-label="Permalink to &quot;1. 下载源码&quot;">​</a></h3><p>在 Github 项目中, 点击下图中 <code>Download ZIP</code> 即可下载当前项目源码 <img src="'+a+'" alt="down repo"></p><div class="info custom-block"><p class="custom-block-title">实操</p><p>打开 <code>https://github.com/lqzhgood/Shmily-Get-QQ-PC_MHT</code> 并下载 <br> 下载后解压缩 <code>Shmily-Get-QQ-PC_MHT-main.zip</code> 到 <code>D:\\Shmily-Get-QQ-PC_MHT-main</code></p></div><h3 id="_2-安装项目运行时环境" tabindex="-1">2. 安装项目运行时环境 <a class="header-anchor" href="#_2-安装项目运行时环境" aria-label="Permalink to &quot;2. 安装项目运行时环境&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">什么是运行时环境?</p><p>顾名思义: 运行这个 &quot;东西&quot; 所需要的 &quot;环境&quot;</p><p>例如你有一个 <code>风景.mp4</code> 的视频, 如果你要播放出来, 那么你需要一个 <code>视频播放器</code> <br> 那么运行 <code>风景.mp4</code> 所需要环境就是 <code>视频播放器</code></p><p>下载的 <code>源码</code> 也需要对应的 <code>(运行时)环境</code></p></div><p>项目的源码可能是由不同 <code>编程语言</code> 书写的, 相应的 <code>编程语言</code> 需要对应的 <code>运行时</code>, 如 <code>C++源代码</code> 需要 <code>C++运行时</code>, <code>Java源代码</code> 需要 <code>Java运行时</code></p><h4 id="_2-1-如何判断项目的-编程语言" tabindex="-1">2.1 如何判断项目的 <code>编程语言</code> <a class="header-anchor" href="#_2-1-如何判断项目的-编程语言" aria-label="Permalink to &quot;2.1 如何判断项目的 `编程语言`&quot;">​</a></h4><h5 id="_2-1-1-按照项目的特征-推荐" tabindex="-1">2.1.1 按照项目的特征(推荐) <a class="header-anchor" href="#_2-1-1-按照项目的特征-推荐" aria-label="Permalink to &quot;2.1.1 按照项目的特征(推荐)&quot;">​</a></h5><table tabindex="0"><thead><tr><th>编程语言</th><th>特征</th></tr></thead><tbody><tr><td>nodejs</td><td><a href="../setup-runtime/assets/is-nodejs.png">有 <code>package.json</code> 文件, 或大量 <code>.js</code> <code>.ts</code> 后缀文件</a></td></tr><tr><td>python</td><td><a href="../setup-runtime/assets/is-python.png">有 <code>requirements.txt</code> 文件, 或大量 <code>.py</code> 后缀文件</a></td></tr><tr><td>java</td><td><a href="../setup-runtime/assets/is-java.png">大量 <code>.java</code> 后缀文件</a></td></tr></tbody></table><h5 id="_2-1-2-github-会自动标注主要语言-并不准确" tabindex="-1">2.1.2 <code>Github</code> 会自动标注主要语言(并不准确) <a class="header-anchor" href="#_2-1-2-github-会自动标注主要语言-并不准确" aria-label="Permalink to &quot;2.1.2 `Github` 会自动标注主要语言(并不准确)&quot;">​</a></h5><p><img src="'+o+`" alt="what-languages"></p><h4 id="_2-2-根据-编程语言-安装对应的-运行时" tabindex="-1">2.2 根据 <code>编程语言</code> 安装对应的 <code>运行时</code> <a class="header-anchor" href="#_2-2-根据-编程语言-安装对应的-运行时" aria-label="Permalink to &quot;2.2 根据 \`编程语言\` 安装对应的 \`运行时\`&quot;">​</a></h4><table tabindex="0"><thead><tr><th>编程语言</th><th>安装<code>运行时</code></th></tr></thead><tbody><tr><td>nodejs</td><td><a href="./../setup-runtime/nodejs.html">教程</a></td></tr><tr><td>python</td><td><a href="./../setup-runtime/python.html">教程</a></td></tr><tr><td>java</td><td><a href="./../setup-runtime/java.html">教程</a></td></tr><tr><td>php</td><td><a href="./../setup-runtime/php.html">教程</a></td></tr><tr><td>docker</td><td><a href="./../setup-runtime/docker.html">教程</a></td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">实操</p><p>打开 <code>D:\\Shmily-Get-QQ-PC_MHT-main</code>, 项目中有 <code>package.json</code> 文件, 所以这是一个 <code>nodejs</code> 项目 <br> 按照 <a href="./../setup-runtime/nodejs.html">nodejs 教程</a>, <br> 下载 Windows 平台 <code>https://nodejs.org/dist/v18.18.2/node-v18.18.2-x64.msi</code> 并安装 <br> 在项目目录 <code>D:\\Shmily-Get-QQ-PC_MHT-main</code> 执行 <code>npm i</code> 安装依赖 <br></p></div><h3 id="_3-使用" tabindex="-1">3. 使用 <a class="header-anchor" href="#_3-使用" aria-label="Permalink to &quot;3. 使用&quot;">​</a></h3><p>参照具体项目中的文档继续</p><div class="info custom-block"><p class="custom-block-title">实操</p><p>打开 <code>https://github.com/lqzhgood/Shmily-Get-QQ-PC_MHT</code>, 参照项目文档中的 <b>使用</b> 部分</p><ol start="0"><li><p>安装 node 环境</p><blockquote><p>上述 2.2 已经安装</p></blockquote></li><li><p>安装 php 环境</p><blockquote><p>参照2.2 安装 php 环境</p></blockquote></li><li><p>导出的 .mht 文件放入 input</p><blockquote><p>从 PC QQ 的聊天管理器中导出 <code>.mht</code> 格式的聊天记录, 并放入 <code>input</code> 文件夹(如没有则新建)</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 文件夹结构</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-\\</span></span>
<span class="line"><span>  - node_modules</span></span>
<span class="line"><span>  - input       &lt;--- 如果没有这个文件夹则新建</span></span>
<span class="line"><span>    - xxx.mht   &lt;--- 放到这里</span></span>
<span class="line"><span>  - index.js</span></span>
<span class="line"><span>  - package.json</span></span>
<span class="line"><span>  - README.md</span></span></code></pre></div></li><li><p>修改 <code>config.js</code></p><blockquote><p>打开 <code>config.js</code> 按照里面的说明和示例进行修改</p></blockquote></li><li><p>执行 npm run build</p><blockquote><p>在项目目录中打开 <code>命令提示符</code><img src="`+t+'" alt="open_cmd"> 然后运行 <code>npm run build</code> (确保是当前项目目录下 D:\\Shmily-Get-QQ-PC_MHT-main) <img src="'+p+`" alt="cmd_run"></p></blockquote></li><li><p>dist 获取 数据文件 和 资源文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 文件夹结构</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-\\</span></span>
<span class="line"><span>  - node_modules</span></span>
<span class="line"><span>  - input</span></span>
<span class="line"><span>    - xxx.mht</span></span>
<span class="line"><span>  - dist</span></span>
<span class="line"><span>    - data                              &lt;-- 数据文件(夹)</span></span>
<span class="line"><span>        - qq-pc</span></span>
<span class="line"><span>    - QQ_PC_MHT-12345678-20230101.json  &lt;-- 资源文件</span></span>
<span class="line"><span>    - ...                               &lt;-- 其他过程文件及日志</span></span>
<span class="line"><span>  - index.js</span></span>
<span class="line"><span>  - package.json</span></span>
<span class="line"><span>  - README.md</span></span></code></pre></div></li></ol></div><h3 id="_4-其他说明" tabindex="-1">4. 其他说明 <a class="header-anchor" href="#_4-其他说明" aria-label="Permalink to &quot;4. 其他说明&quot;">​</a></h3><p>以上是一个 <code>Github</code> 项目运行的完整流程</p><p>以通过 <code>Shmily</code> 导出 <code>电脑QQ聊天记录</code> 为例, 至少需要运行两个 <code>Github</code> 项目,</p><ol><li>Get 获取数据, <a href="https://github.com/lqzhgood/Shmily-Get-QQ-PC_MHT" target="_blank" rel="noreferrer">https://github.com/lqzhgood/Shmily-Get-QQ-PC_MHT</a><blockquote><p>得到 <code>数据文件(data)</code> 和 <code>资源文件(QQ_PC_MHT-12345678-20230101.json)</code></p></blockquote></li><li>Show 显示数据, <a href="https://github.com/lqzhgood/Shmily-Show/" target="_blank" rel="noreferrer">https://github.com/lqzhgood/Shmily-Show/</a><blockquote><p>使用 Get 得到的 &quot;文件&quot; 生成最后的 &quot;显示&quot; 结果</p></blockquote></li></ol><p>你可通过多个 <code>Get</code> 获取多个 &quot;文件&quot;, 同时导入 <code>Show</code> 获得集中 &quot;显示&quot; 结果</p></details><h2 id="视频教程" tabindex="-1">视频教程 <a class="header-anchor" href="#视频教程" aria-label="Permalink to &quot;视频教程&quot;">​</a></h2><p>施工中....</p><p>9 / 43 // 2023-12-10</p><h2 id="开始项目" tabindex="-1">开始项目 <a class="header-anchor" href="#开始项目" aria-label="Permalink to &quot;开始项目&quot;">​</a></h2><h3 id="大致步骤" tabindex="-1">大致步骤 <a class="header-anchor" href="#大致步骤" aria-label="Permalink to &quot;大致步骤&quot;">​</a></h3><p><code>Get(获取数据)</code> ---&gt; <code>Merger(合并数据)</code> ---&gt; <code>Show(展示数据)</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>大多数情况下 <code>Merger(合并数据)</code> 可以跳过</p></div><h3 id="_1-get-获取数据" tabindex="-1">1. Get-获取数据 <a class="header-anchor" href="#_1-get-获取数据" aria-label="Permalink to &quot;1. Get-获取数据&quot;">​</a></h3><p><a href="./get.html">参考 Get 文档</a></p><h3 id="_2-merger-合并数据-可选" tabindex="-1">2. Merger-合并数据 (可选) <a class="header-anchor" href="#_2-merger-合并数据-可选" aria-label="Permalink to &quot;2. Merger-合并数据 (可选)&quot;">​</a></h3><p><a href="./merger.html">参考 Merger 文档</a></p><h3 id="_3-show-展示数据" tabindex="-1">3. Show-展示数据 <a class="header-anchor" href="#_3-show-展示数据" aria-label="Permalink to &quot;3. Show-展示数据&quot;">​</a></h3><p><a href="./show.html">参考 Show 文档</a></p>`,25)]))}const x=s(l,[["render",i]]);export{f as __pageData,x as default};
